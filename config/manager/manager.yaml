apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: gpu-kernel-manager-operator
    app.kubernetes.io/managed-by: kustomize
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: gkm-system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: gpu-kernel-manager-operator
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
      # securityContext:
        #runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
        - /operator
        args:
          - --leader-elect
          - --health-probe-bind-address=:8081
        image: quay.io/gkm/operator:latest
        imagePullPolicy: IfNotPresent
        name: manager
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        volumeMounts:
          - name: cert
            mountPath: /tmp/k8s-webhook-server/serving-certs
            readOnly: true

      - name: csi-provisioner
        image: k8s.gcr.io/sig-storage/csi-provisioner:v2.2.0
        imagePullPolicy: "IfNotPresent"
        args:
          - "-v=5"
          - "--csi-address=$(ADDRESS)"
          - "--timeout=30s"
          - "--default-fstype=ext4"
        env:
          - name: ADDRESS
            value: /csi/csi.sock
        volumeMounts:
          - name: socket-dir
            mountPath: /csi
      - name: csi-attacher
        image: k8s.gcr.io/sig-storage/csi-attacher:v3.1.0
        imagePullPolicy: "IfNotPresent"
        args:
          - "--csi-address=$(ADDRESS)"
          - "--timeout=30s"
          - "--v=5"
        env:
          - name: ADDRESS
            value: /csi/csi.sock
        volumeMounts:
          - name: socket-dir
            mountPath: /csi

      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
        - name: cert
          secret:
            secretName: webhook-server-cert
        - name: socket-dir
          emptyDir: {}
